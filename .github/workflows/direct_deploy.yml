name: Direct SSH Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Use a well-tested action for SSH deployment instead of our custom script
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
          if_key_exists: replace
      
      # Dynamically generate known_hosts
      - name: Add Known Hosts
        run: ssh-keyscan -H ${{ secrets.HOST_IP }} >> ~/.ssh/known_hosts
      
      # Create a deployment script on the fly
      - name: Create server-side deployment script
        run: |
          cat > deploy_remote.sh << 'EOL'
          #!/bin/bash
          set -e
          
          # Configuration
          APP_DIR="/opt/cloudsecure"
          
          echo "==== CloudSecure Deployment ===="
          echo "Application Directory: $APP_DIR"
          
          # Create application directory
          sudo mkdir -p $APP_DIR
          sudo chown $(whoami):$(whoami) $APP_DIR
          sudo chmod 755 $APP_DIR
          
          # Install Docker if not already installed
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $(whoami)
            # Need to re-login to apply group changes, but we'll continue anyway
          fi
          
          # Install Docker Compose if not already installed
          if ! command -v docker-compose &> /dev/null; then
            echo "Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Create a simple docker-compose.yml file
          mkdir -p $APP_DIR/html
          
          echo 'version: "3"
          
          services:
            nginx:
              image: nginx:alpine
              ports:
                - "80:80"
              volumes:
                - ./html:/usr/share/nginx/html
              restart: unless-stopped' > $APP_DIR/docker-compose.yml
          
          # Create a test HTML file
          echo '<!DOCTYPE html>
          <html>
          <head>
            <title>CloudSecure Deployment</title>
            <style>
              body { font-family: Arial, sans-serif; line-height: 1.6; padding: 20px; }
              .container { max-width: 800px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
              h1 { color: #2c3e50; }
              .info { background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin-top: 20px; }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>CloudSecure Deployment</h1>
              <p>This is a placeholder page for the CloudSecure application.</p>
              
              <div class="info">
                <p><strong>Server:</strong> ' $(hostname) '</p>
                <p><strong>Deployment Time:</strong> ' $(date) '</p>
              </div>
            </div>
          </body>
          </html>' > $APP_DIR/html/index.html
          
          # Start the application
          cd $APP_DIR
          sudo /usr/local/bin/docker-compose down || true
          sudo /usr/local/bin/docker-compose up -d
          
          echo "Deployment completed successfully!"
          EOL
          
          chmod +x deploy_remote.sh
      
      # Copy the script to the server
      - name: Copy deployment script
        run: scp -o StrictHostKeyChecking=accept-new ./deploy_remote.sh ${{ secrets.SSH_USERNAME }}@${{ secrets.HOST_IP }}:~/deploy_remote.sh
      
      # Execute the script on the server
      - name: Execute deployment script
        run: ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.HOST_IP }} "bash ~/deploy_remote.sh"