name: CloudSecure CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          # Adding a specific role assumption is recommended for security
          # role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          # role-duration-seconds: 1200

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        id: terraform-plan
        run: |
          cd terraform
          terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.event_name != 'pull_request'
        run: |
          cd terraform
          terraform apply -auto-approve tfplan
          # Directly extract the outputs and save them to files
          terraform output -raw ec2_instance_id > ../instance_id.txt
          terraform output -raw ec2_public_ip > ../public_ip.txt

      - name: Display EC2 Information
        if: github.event_name != 'pull_request'
        run: |
          INSTANCE_ID=$(cat instance_id.txt)
          PUBLIC_IP=$(cat public_ip.txt)
          echo "EC2 Instance ID: $INSTANCE_ID"
          echo "EC2 Public IP: $PUBLIC_IP"

      - name: Set up Python
        if: github.event_name != 'pull_request'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ansible
        if: github.event_name != 'pull_request'
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Create Ansible inventory
        if: github.event_name != 'pull_request'
        run: |
          # Read public IP from file
          PUBLIC_IP=$(cat public_ip.txt)
          echo "Using EC2 Public IP: $PUBLIC_IP"
          
          # Create inventory file
          mkdir -p ansible
          echo "[cloudsecure_instances]" > ansible/hosts.ini
          echo "$PUBLIC_IP ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa" >> ansible/hosts.ini
          echo "" >> ansible/hosts.ini
          echo "[cloudsecure_instances:vars]" >> ansible/hosts.ini
          echo "ansible_python_interpreter=/usr/bin/python3" >> ansible/hosts.ini
          
          # Display inventory file
          echo "Created Ansible inventory:"
          cat ansible/hosts.ini

      - name: Set up SSH key
        if: github.event_name != 'pull_request'
        run: |
          # Create SSH directory and set up private key
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Read public IP and add to known hosts
          PUBLIC_IP=$(cat public_ip.txt)
          echo "Adding $PUBLIC_IP to known hosts"
          
          # Use the IP address explicitly with ssh-keyscan
          if [ -n "$PUBLIC_IP" ]; then
            ssh-keyscan -H "$PUBLIC_IP" >> ~/.ssh/known_hosts
            echo "Added $PUBLIC_IP to known hosts"
          else
            echo "Error: Public IP is empty"
            exit 1
          fi

      - name: Test SSH connection
        if: github.event_name != 'pull_request'
        run: |
          PUBLIC_IP=$(cat public_ip.txt)
          echo "Testing SSH connection to $PUBLIC_IP"
          
          # Disable strict host key checking temporarily for the test
          for i in {1..12}; do
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ~/.ssh/id_rsa ec2-user@$PUBLIC_IP exit 2>/dev/null; then
              echo "SSH connection successful!"
              exit 0
            fi
            
            echo "Attempt $i failed. Waiting 20 seconds..."
            sleep 20
            
            if [ $i -eq 12 ]; then
              echo "Failed to establish SSH connection after 12 attempts"
              exit 1
            fi
          done

      - name: Deploy with Ansible
        if: github.event_name != 'pull_request'
        run: |
          PUBLIC_IP=$(cat public_ip.txt)
          echo "Deploying to $PUBLIC_IP"
          ansible-playbook -i ansible/hosts.ini ansible/deploy.yml -v 