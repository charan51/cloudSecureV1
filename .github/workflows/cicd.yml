name: CloudSecure CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          # Adding a specific role assumption is recommended for security
          # role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          # role-duration-seconds: 1200

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        id: terraform-plan
        run: |
          cd terraform
          terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.event_name != 'pull_request'
        run: |
          cd terraform
          terraform apply -auto-approve tfplan
          # Use a more reliable way to capture outputs
          INSTANCE_ID=$(terraform output -raw ec2_instance_id || echo "")
          PUBLIC_IP=$(terraform output -raw ec2_public_ip || echo "")
          echo "EC2_INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV
          echo "EC2_PUBLIC_IP=${PUBLIC_IP}" >> $GITHUB_ENV

      - name: Display EC2 Information
        run: |
          echo "EC2 Instance ID: ${{ env.EC2_INSTANCE_ID }}"
          echo "EC2 Public IP: ${{ env.EC2_PUBLIC_IP }}"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Wait for EC2 instance to be ready
        if: github.event_name != 'pull_request'
        run: |
          echo "Waiting for SSH to be available..."
          for i in {1..10}; do
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 ec2-user@${{ env.EC2_PUBLIC_IP }} "echo SSH connection successful"; then
              echo "SSH connection established!"
              break
            fi
            echo "Attempt $i failed. Waiting 30 seconds..."
            sleep 30
            if [ $i -eq 10 ]; then
              echo "Failed to establish SSH connection after 10 attempts"
              exit 1
            fi
          done

      - name: Set up SSH key for Ansible
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Update Ansible inventory file
        run: |
          mkdir -p ansible
          echo "[cloudsecure_instances]" > ansible/hosts.ini
          echo "${{ env.EC2_PUBLIC_IP }} ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa" >> ansible/hosts.ini
          echo "" >> ansible/hosts.ini
          echo "[cloudsecure_instances:vars]" >> ansible/hosts.ini
          echo "ansible_python_interpreter=/usr/bin/python3" >> ansible/hosts.ini
          cat ansible/hosts.ini

      - name: Setup SSH for Ansible
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Wait for EC2 instance to initialize
        run: |
          # Wait for SSH to be available
          echo "Waiting for SSH to become available on ${{ env.EC2_PUBLIC_IP }}..."
          for i in {1..12}; do
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -i ~/.ssh/id_rsa ec2-user@${{ env.EC2_PUBLIC_IP }} echo "SSH is available"; then
              echo "SSH connection successful!"
              break
            fi
            if [ $i -eq 12 ]; then
              echo "Timed out waiting for SSH to become available"
              exit 1
            fi
            echo "Attempt $i failed, waiting 10 seconds..."
            sleep 10
          done

      - name: Deploy with Ansible
        run: |
          ansible-playbook -i ansible/hosts.ini ansible/deploy.yml 