name: CloudSecure CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          # Adding a specific role assumption is recommended for security
          # role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          # role-duration-seconds: 1200

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -out=tfplan

      - name: Terraform Apply and Extract Outputs
        if: github.event_name != 'pull_request'
        run: |
          cd terraform
          terraform apply -auto-approve tfplan
          
          # Extract outputs and save to simple text files
          echo "Extracting outputs..."
          terraform output -json > outputs.json
          
          # Use jq to extract the values safely
          echo $(jq -r '.ec2_instance_id.value' outputs.json) > instance_id.txt
          echo $(jq -r '.ec2_public_ip.value' outputs.json) > public_ip.txt
          
          # Move files to parent directory for other steps
          mv instance_id.txt ../instance_id.txt
          mv public_ip.txt ../public_ip.txt
          
          # Display the outputs directly
          echo "EC2 Instance ID: $(cat ../instance_id.txt)"
          echo "EC2 Public IP: $(cat ../public_ip.txt)"

      - name: Install jq
        if: github.event_name != 'pull_request'
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Set up Python
        if: github.event_name != 'pull_request'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ansible
        if: github.event_name != 'pull_request'
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Create Ansible inventory
        if: github.event_name != 'pull_request'
        run: |
          # Get the public IP directly from the file
          PUBLIC_IP=$(cat public_ip.txt)
          echo "Public IP from file: $PUBLIC_IP"
          
          # Validate IP address format
          if [[ ! $PUBLIC_IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid IP address format: $PUBLIC_IP"
            exit 1
          fi
          
          # Create inventory file
          mkdir -p ansible
          echo "[cloudsecure_instances]" > ansible/hosts.ini
          echo "$PUBLIC_IP ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa" >> ansible/hosts.ini
          echo "" >> ansible/hosts.ini
          echo "[cloudsecure_instances:vars]" >> ansible/hosts.ini
          echo "ansible_python_interpreter=/usr/bin/python3" >> ansible/hosts.ini
          
          echo "Created Ansible inventory:"
          cat ansible/hosts.ini

      - name: Set up SSH key
        if: github.event_name != 'pull_request'
        run: |
          # Create SSH directory and set up private key
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Get public IP and add to known hosts
          PUBLIC_IP=$(cat public_ip.txt)
          echo "Setting up SSH for IP: $PUBLIC_IP"
          
          # Skip host key checking for Ansible
          echo "StrictHostKeyChecking no" > ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Wait for instance to be ready
        if: github.event_name != 'pull_request'
        run: |
          PUBLIC_IP=$(cat public_ip.txt)
          echo "Waiting for instance to be ready at $PUBLIC_IP..."
          
          MAX_RETRIES=15
          RETRY_INTERVAL=20
          
          for ((i=1; i<=MAX_RETRIES; i++)); do
            echo "Attempt $i of $MAX_RETRIES..."
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ~/.ssh/id_rsa ec2-user@$PUBLIC_IP "echo SSH connection successful"; then
              echo "SSH connection established!"
              break
            fi
            
            if [ $i -eq $MAX_RETRIES ]; then
              echo "Failed to connect after $MAX_RETRIES attempts"
              echo "DEBUG: AWS instance details:"
              aws ec2 describe-instances --instance-ids $(cat instance_id.txt) --query 'Reservations[].Instances[].{State:State.Name,PublicIP:PublicIpAddress,SecurityGroups:SecurityGroups}'
              exit 1
            fi
            
            echo "Waiting $RETRY_INTERVAL seconds before next attempt..."
            sleep $RETRY_INTERVAL
          done

      - name: Deploy with Ansible
        if: github.event_name != 'pull_request'
        run: |
          # For debugging
          PUBLIC_IP=$(cat public_ip.txt)
          echo "Deploying to $PUBLIC_IP with Ansible"
          
          # Run with verbose logging
          ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ansible/hosts.ini ansible/deploy.yml -vvv 