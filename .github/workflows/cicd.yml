name: CloudSecure CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          # Adding a specific role assumption is recommended for security
          # role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          # role-duration-seconds: 1200

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.event_name != 'pull_request'
        run: |
          cd terraform
          terraform apply -auto-approve tfplan
          
          # Debug Terraform outputs
          echo "Terraform outputs:"
          terraform output
          
          # Get the instance ID directly
          INSTANCE_ID=$(terraform output -raw ec2_instance_id || echo "")
          echo "Instance ID: $INSTANCE_ID"
          
          # Wait for the instance to get a public IP (in case it's delayed)
          echo "Waiting for public IP assignment..."
          for i in {1..10}; do
            PUBLIC_IP=$(terraform output -raw ec2_public_ip || echo "")
            echo "Attempt $i - Public IP: $PUBLIC_IP"
            
            if [[ -n "$PUBLIC_IP" && "$PUBLIC_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Valid public IP found: $PUBLIC_IP"
              break
            fi
            
            if [ $i -eq 10 ]; then
              echo "Failed to get a valid public IP after multiple attempts"
              exit 1
            fi
            
            echo "Waiting 10 seconds for IP assignment..."
            sleep 10
            
            # Refresh Terraform state
            terraform refresh
          done
          
          # Save the outputs to files
          echo "$INSTANCE_ID" > ../instance_id.txt
          echo "$PUBLIC_IP" > ../public_ip.txt

      - name: Verify EC2 Instance
        if: github.event_name != 'pull_request'
        run: |
          # Get instance ID from previous step
          INSTANCE_ID=$(cat instance_id.txt || echo "")
          
          if [[ -z "$INSTANCE_ID" ]]; then
            echo "Error: No instance ID found"
            exit 1
          fi
          
          echo "Checking EC2 instance status..."
          aws ec2 describe-instances --instance-ids "$INSTANCE_ID" --query 'Reservations[].Instances[].{InstanceId:InstanceId,State:State.Name,PublicIP:PublicIpAddress}'
          
          # Get public IP directly from AWS (as a fallback)
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" --query 'Reservations[].Instances[].PublicIpAddress' --output text)
          
          echo "Public IP from AWS API: $PUBLIC_IP"
          
          if [[ -n "$PUBLIC_IP" && "$PUBLIC_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Valid public IP found from AWS API: $PUBLIC_IP"
            echo "$PUBLIC_IP" > public_ip.txt
          else
            echo "Error: Could not get a valid public IP for the instance"
            exit 1
          fi

      - name: Set up Python
        if: github.event_name != 'pull_request'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ansible
        if: github.event_name != 'pull_request'
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Create Ansible inventory
        if: github.event_name != 'pull_request'
        run: |
          # Get the public IP from the file
          PUBLIC_IP=$(cat public_ip.txt)
          echo "Using IP: $PUBLIC_IP for Ansible"
          
          # Create the inventory file
          mkdir -p ansible
          echo "[cloudsecure_instances]" > ansible/hosts.ini
          echo "$PUBLIC_IP ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> ansible/hosts.ini
          echo "" >> ansible/hosts.ini
          echo "[cloudsecure_instances:vars]" >> ansible/hosts.ini
          echo "ansible_python_interpreter=/usr/bin/python3" >> ansible/hosts.ini
          
          echo "Created Ansible inventory:"
          cat ansible/hosts.ini

      - name: Set up SSH key
        if: github.event_name != 'pull_request'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Disable strict host key checking
          echo "Host *" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Wait for SSH access
        if: github.event_name != 'pull_request'
        run: |
          PUBLIC_IP=$(cat public_ip.txt)
          echo "Waiting for SSH access to $PUBLIC_IP..."
          
          for i in {1..15}; do
            echo "Attempt $i..."
            if ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 ec2-user@$PUBLIC_IP "echo SSH Ready"; then
              echo "SSH connection successful!"
              break
            fi
            
            if [ $i -eq 15 ]; then
              echo "Failed to establish SSH connection after 15 attempts"
              
              # Check security group
              INSTANCE_ID=$(cat instance_id.txt)
              echo "Security group configuration:"
              aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[].Instances[].SecurityGroups[]'
              
              exit 1
            fi
            
            echo "Waiting 20 seconds..."
            sleep 20
          done

      - name: Deploy with Ansible
        if: github.event_name != 'pull_request'
        run: |
          PUBLIC_IP=$(cat public_ip.txt)
          echo "Deploying to $PUBLIC_IP with Ansible"
          
          ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ansible/hosts.ini ansible/deploy.yml -v 