name: CloudSecure Infrastructure Teardown

on:
  workflow_dispatch:
    inputs:
      confirmation:
        description: 'Type "CONFIRM" to proceed with teardown'
        required: true
        default: ''

jobs:
  teardown:
    if: github.event.inputs.confirmation == 'CONFIRM'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Find existing instances
        id: find_instances
        run: |
          INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=cloudsecure-server" "Name=instance-state-name,Values=running,stopped,pending" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)
          
          echo "Found instance IDs: $INSTANCE_IDS"
          echo "INSTANCE_IDS=$INSTANCE_IDS" >> $GITHUB_ENV

      - name: Stop containers if possible
        if: env.INSTANCE_IDS != ''
        run: |
          for INSTANCE_ID in ${{ env.INSTANCE_IDS }}; do
            echo "Attempting to stop containers on instance $INSTANCE_ID"
            
            # Try SSM command to stop containers
            aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --parameters "commands=[cd /opt/cloudsecure && docker-compose down]" \
              --output text || echo "Failed to run SSM command, instance may not be SSM-enabled"
          done

      - name: Terraform Destroy
        working-directory: ./terraform
        run: terraform destroy -auto-approve

      - name: Verify resources are cleaned up
        run: |
          echo "Checking for any remaining EC2 instances with CloudSecure tags..."
          REMAINING_INSTANCES=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=cloudsecure-server" "Name=instance-state-name,Values=running,stopped,pending" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)
          
          if [ -n "$REMAINING_INSTANCES" ]; then
            echo "Warning: Some instances may still exist: $REMAINING_INSTANCES"
            echo "You may need to manually delete these from the AWS console."
          else
            echo "No CloudSecure instances remain."
          fi
          
          echo "Checking for Security Groups..."
          SG_IDS=$(aws ec2 describe-security-groups \
            --filters "Name=group-name,Values=cloudsecure-sg*" \
            --query "SecurityGroups[*].GroupId" \
            --output text)
          
          if [ -n "$SG_IDS" ]; then
            echo "Warning: Some security groups may still exist: $SG_IDS"
            echo "You may need to manually delete these from the AWS console."
          else
            echo "No CloudSecure security groups remain."
          fi
          
          echo "Teardown process complete."