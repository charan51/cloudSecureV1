name: Security AI CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  EC2_HOST: ec2-3-83-87-177.compute-1.amazonaws.com

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy application via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true  # Stop on errors
          script: |
            echo "==== Starting deployment ===="
            
            # Ensure app directory exists
            sudo mkdir -p /opt/cloudsecure
            sudo chown ec2-user:ec2-user /opt/cloudsecure
            cd /opt/cloudsecure
            
            # Clone repository if not exists, otherwise pull latest changes
            if [ -d .git ]; then
              echo "Pulling latest changes"
              git pull
            else
              echo "Cloning repository"
              git clone https://github.com/${{ github.repository }}.git .
            fi
            
            # Create environment files
            echo "Creating environment files"
            
            # Docker Compose .env
            cat > .env << EOF
            ECR_REPOSITORY_URI=security-ai
            EOF
            
            # Create client env file
            mkdir -p app/client
            cat > app/client/.env << EOF
            REACT_APP_API_URL=http://localhost:3000
            NODE_ENV=development
            EOF
            
            # Create server env file
            mkdir -p app/server
            cat > app/server/.env << EOF
            PORT=3000
            NODE_ENV=development
            DB_HOST=db-service
            DB_USER=admin
            DB_PASSWORD=adminpassword
            DB_NAME=security_ai
            REDIS_HOST=redis-service
            MONGODB_URI=mongodb://mongo-user:mongo-password@mongo-service:27017/cloudsecure?authSource=admin
            CLIENT_URL=http://localhost
            JWT_SECRET=temporary_jwt_secret
            EOF
            
            # Check Docker is installed and running
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker"
              sudo yum update -y
              sudo amazon-linux-extras install docker -y
              sudo service docker start
              sudo usermod -a -G docker ec2-user
              # Need to refresh group membership
              newgrp docker
            fi
            
            # Install Docker Compose if needed
            if ! command -v docker-compose &> /dev/null && ! command -v docker compose &> /dev/null; then
              echo "Installing Docker Compose"
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
            fi
            
            # Run Docker Compose
            echo "Starting application with Docker Compose"
            if command -v docker compose &> /dev/null; then
              docker compose up -d --build
            else
              docker-compose up -d --build
            fi
            
            # Check container status
            docker ps
            
            echo "==== Deployment completed ===="
      
      - name: Verify deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/cloudsecure
            echo "==== Checking deployed containers ===="
            docker ps
            
            echo "==== Checking container logs ===="
            docker compose logs --tail=20
