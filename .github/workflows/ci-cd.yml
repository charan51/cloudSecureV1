name: CloudSecure CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write  # Required for OIDC authentication with AWS
      contents: read   # Required for actions/checkout

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js (for your application)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Check Node.js and npm versions
        run: |
          node --version
          npm --version

      # Step 3: Install Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0
      - name: Check Terraform version
        run: terraform --version

      # Step 4: Install Ansible
      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install ansible
          ansible --version

      # Step 5: Configure AWS credentials using OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123456789012:role/GitHubActionsRole-abc123
          aws-region: us-east-1
          audience: sts.amazonaws.com

      # Step 6: Install application dependencies and run tests
      - name: Install dependencies and run tests
        working-directory: ./app
        run: |
          if [ -f "package.json" ]; then
            npm install
            npm test || echo "No tests found"
          fi

      # Step 7: Build the application
      - name: Build application
        working-directory: ./app
        run: |
          if [ -f "package.json" ]; then
            npm run build || echo "No build script found"
          fi

      # Step 8: Run Terraform to provision infrastructure
      - name: Run Terraform
        working-directory: ./terraform
        run: |
          terraform init
          terraform apply -auto-approve

      # Step 9: Fetch EC2 instance IP from Terraform outputs
      - name: Fetch EC2 instance IP
        working-directory: ./terraform
        run: |
          echo "INSTANCE_IP=$(terraform output -raw instance_ip)" >> $GITHUB_ENV
      - name: Display EC2 instance IP
        run: echo "EC2 Instance IP: ${{ env.INSTANCE_IP }}"

      # Step 10: Generate Ansible inventory
      - name: Generate Ansible inventory
        working-directory: ./ansible
        run: |
          cat << EOF > inventory.ini
            [cloudsecure_instances]
            ${{ env.INSTANCE_IP }} ansible_user=ec2-user ansible_ssh_private_key_file=/tmp/cloudsecure.pem

            [cloudsecure_instances:vars]
            ansible_python_interpreter=/usr/bin/python3
          EOF
          cat inventory.ini

      # Step 11: Download SSH key from S3
      - name: Download SSH key from S3
        run: |
          aws s3 cp s3://security-ai-secrets-<suffix>/cloudsecure.pem /tmp/cloudsecure.pem
          chmod 400 /tmp/cloudsecure.pem

      # Step 12: Run Ansible playbook
      - name: Run Ansible playbook
        working-directory: ./ansible
        run: |
          ansible-playbook -i inventory.ini deploy.yml

      # Step 13: Post-build message
      - name: Post-build message
        run: echo "Deployment completed successfully!"