name: Security AI CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  EC2_HOST: ec2-3-83-87-177.compute-1.amazonaws.com

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Build application
        run: |
          echo "Building application..."
          # Build steps here
    
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible
      
      # Option 1: Set up SSH directly
      - name: Setup SSH manually
        run: |
          # Create SSH directory
          mkdir -p $HOME/.ssh
          chmod 700 $HOME/.ssh
          
          # Write private key to file
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > $HOME/.ssh/id_rsa
          chmod 600 $HOME/.ssh/id_rsa
          
          # Add host to known_hosts
          echo "${{ env.EC2_HOST }} ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCyvYV7pa8DTfQEJz6yoLTgJzUGVxA5gl9KwhH7HnK/YPUeJs+l7P2L1WoZ67Yd2eutpSclVQEpkUW2OVfXB3qbTzCtLSQA8MV3ijACO60YMciMUHxc3Ljz9m9w+fWJmRHv5Nul/JR0I+4semCIxC5B5JuJ2ESZ2aJZq0jtFkm1Bxqo+dZH1SYvra90DQoO9czpjqfBR9dCDRzgELUW0YltJ5ZnZPXCgbEQrhgtJQrim/MhMdN1ganGmvWugxA+t0I5rvKcSEqQeGmvI9qS4rWEo3OQiZ6Kx3z0PzULDQYjRasiC0ClYGXc9SRRm36LGG7dSt6QvXGxj2TdRPIUfxWr" >> $HOME/.ssh/known_hosts
          
          # Test SSH connection
          ssh -i $HOME/.ssh/id_rsa -o ConnectTimeout=5 ec2-user@${{ env.EC2_HOST }} echo "SSH connection test" || true
      
      # Option 2: Use appleboy/ssh-action for testing
      - name: Test SSH Connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "SSH connection successful!"
      
      - name: Create Ansible files
        run: |
          # Create inventory file
          cat > inventory.ini << EOF
          [cloudsecure_instances]
          ${{ env.EC2_HOST }} ansible_user=ec2-user ansible_ssh_private_key_file=$HOME/.ssh/id_rsa
          
          [cloudsecure_instances:vars]
          ansible_python_interpreter=/usr/bin/python3
          EOF
          
          # Create ansible.cfg
          cat > ansible.cfg << EOF
          [defaults]
          host_key_checking = False
          EOF
          
          # Update deploy.yml to handle firewalld
          if [ -f ansible/deploy.yml ]; then
            sed -i '/firewalld/s/^/#/g' ansible/deploy.yml || echo "Failed to comment out firewalld"
          fi
      
      - name: Run Ansible playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: ansible/deploy.yml
