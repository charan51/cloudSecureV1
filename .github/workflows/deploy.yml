name: Deploy cloudSecureV1

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build client image
        run: docker build -t cloudsecure-client:latest ./app/client

      - name: Build server image
        run: docker build -t cloudsecure-server:latest ./app/server

      - name: Save client image as tar
        run: docker save -o cloudsecure-client.tar cloudsecure-client:latest

      - name: Save server image as tar
        run: docker save -o cloudsecure-server.tar cloudsecure-server:latest

      - name: Upload images as artifacts with retry
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            echo "Uploading artifacts..."
            actions/upload-artifact@v3 --name docker-images --path "cloudsecure-client.tar\ncloudsecure-server.tar"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Docker image artifacts with retry
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            echo "Downloading artifacts..."
            actions/download-artifact@v3 --name docker-images --path .

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve -var "ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"
        working-directory: ./terraform

      - name: Get EC2 public IP
        id: get_ip
        run: echo "INSTANCE_IP=$(terraform output -raw instance_public_ip)" >> $GITHUB_ENV
        working-directory: ./terraform

      - name: Set up SSH key
        run: |
          mkdir -p /home/runner/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /home/runner/.ssh/id_rsa
          chmod 600 /home/runner/.ssh/id_rsa

      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Generate Ansible inventory
        run: |
          sed "s/{{ instance_public_ip }}/${{ env.INSTANCE_IP }}/" ansible/inventory.tpl > ansible/inventory

      - name: Run Ansible Playbook
        run: ansible-playbook -i ansible/inventory ansible/playbook.yml