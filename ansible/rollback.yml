---
- name: Rollback CloudSecure Application
  hosts: cloudsecure_instances
  become: yes

  vars:
    app_dir: /opt/cloudsecure

  tasks:
    - name: Stop all containers
      command: docker-compose down
      args:
        chdir: "{{ app_dir }}"
      ignore_errors: yes

    - name: Remove all containers and volumes
      command: docker-compose down -v
      args:
        chdir: "{{ app_dir }}"
      ignore_errors: yes

    - name: Restore MySQL backup if exists
      shell: |
        latest_backup=$(ls -t {{ app_dir }}/backups/mysql_backup_*.sql | head -n1)
        if [ -f "$latest_backup" ]; then
          cd {{ app_dir }} && docker-compose up -d db-service
          sleep 30  # Wait for MySQL to be ready
          docker-compose exec -T db-service mysql -u admin -padminpassword security_ai < "$latest_backup"
        fi
      args:
        executable: /bin/bash
      ignore_errors: yes

    - name: Restore MongoDB backup if exists
      shell: |
        latest_backup=$(ls -t {{ app_dir }}/backups/mongo_backup_*.archive | head -n1)
        if [ -f "$latest_backup" ]; then
          cd {{ app_dir }} && docker-compose up -d mongo-service
          sleep 30  # Wait for MongoDB to be ready
          docker-compose exec -T mongo-service mongorestore --uri='mongodb://mongo-user:mongo-password@localhost:27017/cloudsecure?authSource=admin' --archive < "$latest_backup"
        fi
      args:
        executable: /bin/bash
      ignore_errors: yes

    - name: Build Docker images
      command: docker-compose build
      args:
        chdir: "{{ app_dir }}"
      environment:
        COMPOSE_HTTP_TIMEOUT: "200"

    - name: Start all services
      command: docker-compose up -d
      args:
        chdir: "{{ app_dir }}"
      environment:
        COMPOSE_HTTP_TIMEOUT: "200"

    - name: Wait for services to be ready
      uri:
        url: "http://localhost:3000/health"
        method: GET
        status_code: 200
      register: result
      until: result.status == 200
      retries: 30
      delay: 10
      ignore_errors: yes

    - name: Check container status
      command: docker-compose ps
      args:
        chdir: "{{ app_dir }}"
      register: container_status
      changed_when: false

    - name: Display service status
      debug:
        var: container_status.stdout_lines 