---
- name: Deploy CloudSecure Application
  hosts: cloudsecure_instances
  become: yes  # Use sudo for privileged tasks where needed
  gather_facts: yes

  vars:
    app_dir: /opt/cloudsecure
    docker_compose_version: "2.29.2"
    node_version: "16.x"
    vault_db_user: "your_db_username"
    vault_db_password: "your_db_password"
    vault_mongo_user: "your_mongo_username"
    vault_mongo_password: "your_mongo_password"
    vault_jwt_secret: "your_jwt_secret"

  pre_tasks:
    - name: Ensure SSH connection is stable
      ansible.builtin.wait_for_connection:
        delay: 5
        timeout: 120
      tags: always

    - name: Determine OS release
      ansible.builtin.command: cat /etc/os-release
      register: os_release
      changed_when: false
      tags: debug

    - name: Debug - Show OS information
      ansible.builtin.debug:
        msg: "OS Info: {{ ansible_distribution }} {{ ansible_distribution_version }}"
      tags: debug

    - name: Ensure Ansible tmp directory exists
      ansible.builtin.file:
        path: "/tmp/ansible-ec2-user/tmp"
        state: directory
        mode: '0755'  # Relaxed permissions to ensure accessibility
        owner: ec2-user
        group: ec2-user
      tags: setup

  tasks:
    - name: Add Node.js 16.x repository (compatible with Amazon Linux 2)
      ansible.builtin.shell: curl -fsSL https://rpm.nodesource.com/setup_16.x | bash -
      args:
        executable: /bin/bash
      changed_when: true
      tags: packages

    - name: Wait for any existing yum processes to finish
      ansible.builtin.pause:
        seconds: 10
      tags: packages

    - name: Install Docker using yum
      ansible.builtin.shell: yum install -y docker
      args:
        executable: /bin/bash
      register: docker_install_result
      retries: 3
      delay: 10
      until: docker_install_result.rc == 0
      tags: docker

    - name: Install git and python dependencies
      ansible.builtin.shell: yum install -y git python3 python3-pip
      args:
        executable: /bin/bash
      register: git_install_result
      retries: 3
      delay: 10
      until: git_install_result.rc == 0
      tags: packages

    - name: Install nodejs (compatible version)
      ansible.builtin.shell: yum install -y nodejs
      args:
        executable: /bin/bash
      register: nodejs_install_result
      retries: 3
      delay: 10
      until: nodejs_install_result.rc == 0
      tags: packages

    - name: Install Docker Compose (legacy binary)
      ansible.builtin.get_url:
        url: "https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-linux-{{ ansible_architecture }}"
        dest: /usr/local/bin/docker-compose
        mode: '0755'
        force: yes
      tags: docker

    - name: Start and enable Docker service
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes
      register: docker_result
      tags: docker

    - name: Debug docker service status
      ansible.builtin.debug:
        msg: "Docker service status: {{ docker_result }}"
      tags: debug

    - name: Add ec2-user to docker group
      ansible.builtin.user:
        name: ec2-user
        groups: docker
        append: yes
      tags: user

    - name: Reset SSH connection to apply group changes
      ansible.builtin.meta: reset_connection
      tags: user

    - name: Wait for SSH to become available after reset
      ansible.builtin.wait_for_connection:
        delay: 10  # Increased delay for stability
        timeout: 120  # Extended timeout
      tags: user

    - name: Re-ensure Ansible tmp directory permissions post-reset
      ansible.builtin.file:
        path: "/tmp/ansible-ec2-user/tmp"
        state: directory
        mode: '0755'  # Relaxed permissions
        owner: ec2-user
        group: ec2-user
      tags: user

    - name: Verify SSH connectivity post-reset
      ansible.builtin.shell: whoami && ls -ld /tmp/ansible-ec2-user/tmp
      register: ssh_verify
      become: no  # Run as ec2-user
      tags: debug

    - name: Debug SSH verification
      ansible.builtin.debug:
        msg: "SSH verification output: {{ ssh_verify.stdout_lines }}"
      tags: debug

    - name: Debug remote tmp directory and disk space
      ansible.builtin.shell: |
        df -h /tmp && ls -ld /tmp && whoami && touch /tmp/ansible-ec2-user/tmp/testfile && rm /tmp/ansible-ec2-user/tmp/testfile
      register: debug_output
      become: no  # Run as ec2-user to test permissions
      tags: debug

    - name: Show debug output
      ansible.builtin.debug:
        msg: "{{ debug_output.stdout_lines }}"
      tags: debug

    - name: Create application directory
      ansible.builtin.file:
        path: "{{ app_dir }}"
        state: directory
        mode: '0755'
        owner: ec2-user
        group: ec2-user
      tags: setup

    - name: Create application subdirectories
      ansible.builtin.file:
        path: "{{ app_dir }}/{{ item }}"
        state: directory
        mode: '0755'
        owner: ec2-user
        group: ec2-user
      loop:
        - app
        - app/client
        - app/server
        - backups
      tags: setup

    - name: Copy docker-compose file
      ansible.builtin.copy:
        src: ../docker-compose.yml  # Adjust path if needed
        dest: "{{ app_dir }}/docker-compose.yml"
        mode: '0644'
        owner: ec2-user
        group: ec2-user
      tags: deploy

    - name: Run Docker Compose
      ansible.builtin.shell: |
        cd {{ app_dir }} && /usr/local/bin/docker-compose up -d
      become: no  # Run as ec2-user since it's in docker group
      args:
        executable: /bin/bash
      tags: deploy

    - name: Check if containers are running
      ansible.builtin.shell: |
        cd {{ app_dir }} && /usr/local/bin/docker-compose ps
      become: no
      args:
        executable: /bin/bash
      register: container_status
      changed_when: false
      tags: deploy

    - name: Display container status
      ansible.builtin.debug:
        var: container_status.stdout_lines
      tags: debug

    - name: Ensure firewalld is started
      ansible.builtin.service:
        name: firewalld
        state: started
        enabled: yes
      tags: security

    - name: Install cronie to provide crontab command
      ansible.builtin.shell: yum install -y cronie
      args:
        executable: /bin/bash
      register: cronie_install_result
      retries: 3
      delay: 10
      until: cronie_install_result.rc == 0
      tags: backup

    - name: Setup backup cron job
      ansible.builtin.cron:
        name: "Backup databases"
        minute: "0"
        hour: "0"
        job: "cd {{ app_dir }} && docker compose exec -T db-service mysqldump -u {{ vault_db_user }} -p{{ vault_db_password }} security_ai > {{ app_dir }}/backups/mysql_backup_$(date +\\%Y\\%m\\%d).sql && docker compose exec -T mongo-service mongodump --uri='mongodb://{{ vault_mongo_user }}:{{ vault_mongo_password }}@mongo-service:27017/cloudsecure?authSource=admin' --archive > {{ app_dir }}/backups/mongo_backup_$(date +\\%Y\\%m\\%d).archive"
      tags: backup

    - name: Setup log rotation
      ansible.builtin.copy:
        content: |
          /var/lib/docker/containers/*/*.log {
              rotate 7
              daily
              compress
              missingok
              delaycompress
              copytruncate
          }
        dest: /etc/logrotate.d/docker-container-logs
        mode: '0644'
      notify: Run logrotate
      tags: maintenance

    - name: Configure automatic security updates
      ansible.builtin.shell: yum install -y yum-cron
      args:
        executable: /bin/bash
      register: yum_cron_install_result
      retries: 3
      delay: 10
      until: yum_cron_install_result.rc == 0
      tags: security

    - name: Configure yum-cron for security updates
      ansible.builtin.copy:
        content: |
          [commands]
          update_cmd = security
          update_messages = yes
          download_updates = yes
          apply_updates = yes
          random_sleep = 360
        dest: /etc/yum/yum-cron.conf
        mode: '0644'
      tags: security

    - name: Enable yum-cron service
      ansible.builtin.service:
        name: yum-cron
        state: started
        enabled: yes
      tags: security

  handlers:
    - name: Run logrotate
      ansible.builtin.command: logrotate /etc/logrotate.d/docker-container-logs
      tags: maintenance