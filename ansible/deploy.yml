---
- name: Deploy CloudSecure Application
  hosts: cloudsecure_instances
  become: yes
  gather_facts: yes

  vars:
    app_dir: /opt/cloudsecure
    docker_compose_version: "2.29.2"
    node_version: "18.x"
    vault_db_user: "your_db_username"
    vault_db_password: "your_db_password"
    vault_mongo_user: "your_mongo_username"
    vault_mongo_password: "your_mongo_password"
    vault_jwt_secret: "your_jwt_secret"

  pre_tasks:
  - name: Ensure SSH connection is stable
    wait_for_connection:
      delay: 5
      timeout: 120
      
  - name: Determine OS release
    command: cat /etc/os-release
    register: os_release
    changed_when: false

  tasks:
  - name: Debug - Show OS information
    debug:
      msg: "OS Info: {{ ansible_distribution }} {{ ansible_distribution_version }}"
      
  - name: Add Node.js 18.x repository
    shell: curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -

  - name: Install required packages using shell
    shell: |
      yum install -y docker git python3 python3-pip nodejs
    args:
      executable: /bin/bash
    when: "'yum' in os_release.stdout"

  - name: Install Docker Compose (legacy binary)
    get_url:
      url: "https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-linux-{{ ansible_architecture }}"
      dest: /usr/local/bin/docker-compose
      mode: '0755'
      force: yes

  - name: Start and enable Docker service
    service:
      name: docker
      state: started
      enabled: yes
    register: docker_service
    failed_when: docker_service.state != 'started'

  - name: Add current user to docker group
    user:
      name: "{{ ansible_user }}"
      groups: docker
      append: yes
    register: user_update

  - name: Reset SSH connection to apply group changes
    meta: reset_connection
    when: user_update.changed

  - name: Create application directory
    file:
      path: "{{ app_dir }}"
      state: directory
      mode: '0755'
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"

  - name: Copy application files (excluding node_modules)
    ansible.posix.synchronize:
      src: ../app/
      dest: "{{ app_dir }}/app/"
      mode: push
      rsync_opts:
      - "--exclude=node_modules/**"
      - "--chmod=Du=rwx,Dgo=rx,Fu=rw,Fgo=r"
    register: copy_result
    retries: 3
    delay: 5
    until: copy_result is succeeded

  - name: Copy docker-compose file
    copy:
      src: ../docker-compose.yml
      dest: "{{ app_dir }}/docker-compose.yml"
      mode: '0644'

  - name: Create client environment file
    copy:
      content: |
        REACT_APP_API_URL=http://localhost:3000
        NODE_ENV=development
      dest: "{{ app_dir }}/app/client/.env"
      mode: '0644'

  - name: Create server environment file
    copy:
      content: |
        PORT=3000
        NODE_ENV=development
        DB_HOST=db-service
        DB_USER={{ vault_db_user }}
        DB_PASSWORD={{ vault_db_password }}
        DB_NAME=security_ai
        REDIS_HOST=redis-service
        MONGODB_URI=mongodb://{{ vault_mongo_user }}:{{ vault_mongo_password }}@mongo-service:27017/cloudsecure?authSource=admin
        CLIENT_URL=http://localhost
        JWT_SECRET={{ vault_jwt_secret }}
      dest: "{{ app_dir }}/app/server/.env"
      mode: '0644'

  - name: Wait for Docker to be ready
    command: docker info
    retries: 5
    delay: 5
    register: docker_ready
    until: docker_ready.rc == 0

  - name: Remove legacy Docker Compose binary if exists
    file:
      path: /usr/local/bin/docker-compose
      state: absent

  - name: Create directory for Docker CLI plugins
    file:
      path: /usr/local/lib/docker/cli-plugins
      state: directory
      mode: '0755'

  - name: Download Docker Compose v2 plugin binary
    get_url:
      url: "https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-linux-{{ ansible_architecture }}"
      dest: /usr/local/lib/docker/cli-plugins/docker-compose
      mode: '0755'
      force: yes

  - name: Run Docker Compose
    community.docker.docker_compose_v2:
      project_src: "{{ app_dir }}"
      pull: always
      build: always
      state: present
      recreate: auto
    environment:
      COMPOSE_HTTP_TIMEOUT: "200"

  - name: Check if containers are running
    command: docker compose ps
    args:
      chdir: "{{ app_dir }}"
    register: container_status
    changed_when: false

  - name: Display container status
    debug:
      var: container_status.stdout_lines

  - name: Create backup directory
    file:
      path: "{{ app_dir }}/backups"
      state: directory
      mode: '0755'
  - name: Ensure firewalld is started
    service:
      name: firewalld
      state: started
      enabled: yes

  - name: Install cronie to provide crontab command
    yum:
      name: cronie
      state: present

  - name: Setup backup cron job
    cron:
      name: "Backup databases"
      minute: "0"
      hour: "0"
      job: "cd {{ app_dir }} && docker compose exec -T db-service mysqldump -u {{ vault_db_user }} -p{{ vault_db_password }} security_ai > {{ app_dir }}/backups/mysql_backup_$(date +\\%Y\\%m\\%d).sql && docker compose exec -T mongo-service mongodump --uri='mongodb://{{ vault_mongo_user }}:{{ vault_mongo_password }}@mongo-service:27017/cloudsecure?authSource=admin' --archive > {{ app_dir }}/backups/mongo_backup_$(date +\\%Y\\%m\\%d).archive"

  - name: Setup log rotation
    copy:
      content: |
        /var/lib/docker/containers/*/*.log {
            rotate 7
            daily
            compress
            missingok
            delaycompress
            copytruncate
        }
      dest: /etc/logrotate.d/docker-container-logs
      mode: '0644'
    notify: Run logrotate
  - name: Run logrotate
    command: logrotate /etc/logrotate.d/docker-container-logs
