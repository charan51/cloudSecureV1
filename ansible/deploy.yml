---
- name: Deploy CloudSecure Application
  hosts: cloudsecure_instances
  become: yes
  gather_facts: yes

  vars:
    app_dir: /opt/cloudsecure
    docker_compose_version: "2.29.2"
    node_version: "18.x"
    vault_db_user: "your_db_username"
    vault_db_password: "your_db_password"
    vault_mongo_user: "your_mongo_username"
    vault_mongo_password: "your_mongo_password"
    vault_jwt_secret: "your_jwt_secret"

  pre_tasks:
  - name: Ensure SSH connection is stable
    wait_for_connection:
      delay: 5
      timeout: 120
      
  - name: Determine OS release
    command: cat /etc/os-release
    register: os_release
    changed_when: false

  tasks:
  - name: Debug - Show OS information
    debug:
      msg: "OS Info: {{ ansible_distribution }} {{ ansible_distribution_version }}"
      
  - name: Add Node.js 18.x repository
    shell: curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -

  # Install Docker using shell module with proper parameters
  - name: Install Docker using yum
    shell: yum install -y docker
    args:
      executable: /bin/bash

  - name: Install required packages using yum
    shell: yum install -y git python3 python3-pip nodejs
    args:
      executable: /bin/bash

  - name: Install Docker Compose (legacy binary)
    get_url:
      url: "https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-linux-{{ ansible_architecture }}"
      dest: /usr/local/bin/docker-compose
      mode: '0755'
      force: yes

  - name: Start and enable Docker service
    service:
      name: docker
      state: started
      enabled: yes
    register: docker_result

  - name: Debug docker service status
    debug:
      msg: "Docker service status: {{ docker_result }}"

  - name: Add ec2-user to docker group
    user:
      name: ec2-user
      groups: docker
      append: yes

  - name: Reset SSH connection to apply group changes
    meta: reset_connection

  - name: Create application directory
    file:
      path: "{{ app_dir }}"
      state: directory
      mode: '0755'
      owner: ec2-user
      group: ec2-user

  - name: Create application subdirectories
    file:
      path: "{{ app_dir }}/{{ item }}"
      state: directory
      mode: '0755'
      owner: ec2-user
      group: ec2-user
    with_items:
      - app
      - app/client
      - app/server
      - backups

  - name: Copy docker-compose file
    copy:
      src: ../docker-compose.yml
      dest: "{{ app_dir }}/docker-compose.yml"
      mode: '0644'
      owner: ec2-user
      group: ec2-user

  - name: Run Docker Compose
    become_user: ec2-user
    shell: |
      cd {{ app_dir }} && /usr/local/bin/docker-compose up -d
    args:
      executable: /bin/bash

  - name: Check if containers are running
    become_user: ec2-user
    shell: |
      cd {{ app_dir }} && /usr/local/bin/docker-compose ps
    args:
      executable: /bin/bash
    register: container_status
    changed_when: false

  - name: Display container status
    debug:
      var: container_status.stdout_lines

  - name: Create backup directory
    file:
      path: "{{ app_dir }}/backups"
      state: directory
      mode: '0755'
  - name: Ensure firewalld is started
    service:
      name: firewalld
      state: started
      enabled: yes

  - name: Install cronie to provide crontab command
    yum:
      name: cronie
      state: present

  - name: Setup backup cron job
    cron:
      name: "Backup databases"
      minute: "0"
      hour: "0"
      job: "cd {{ app_dir }} && docker compose exec -T db-service mysqldump -u {{ vault_db_user }} -p{{ vault_db_password }} security_ai > {{ app_dir }}/backups/mysql_backup_$(date +\\%Y\\%m\\%d).sql && docker compose exec -T mongo-service mongodump --uri='mongodb://{{ vault_mongo_user }}:{{ vault_mongo_password }}@mongo-service:27017/cloudsecure?authSource=admin' --archive > {{ app_dir }}/backups/mongo_backup_$(date +\\%Y\\%m\\%d).archive"

  - name: Setup log rotation
    copy:
      content: |
        /var/lib/docker/containers/*/*.log {
            rotate 7
            daily
            compress
            missingok
            delaycompress
            copytruncate
        }
      dest: /etc/logrotate.d/docker-container-logs
      mode: '0644'
    notify: Run logrotate
  - name: Run logrotate
    command: logrotate /etc/logrotate.d/docker-container-logs

  - name: Ensure application directories exist
    file:
      path: "{{ app_dir }}/{{ item }}"
      state: directory
      mode: '0755'
      owner: ec2-user
      group: ec2-user
    with_items:
      - app
      - app/client
      - app/server
      - backups

  - name: Configure automatic security updates
    yum:
      name: yum-cron
      state: present

  - name: Configure yum-cron for security updates
    copy:
      content: |
        [commands]
        update_cmd = security
        update_messages = yes
        download_updates = yes
        apply_updates = yes
        random_sleep = 360
      dest: /etc/yum/yum-cron.conf
      mode: '0644'

  - name: Enable yum-cron service
    service:
      name: yum-cron
      state: started
      enabled: yes
