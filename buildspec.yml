version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 12
    commands:
      - echo "Starting installation"
  
  build:
    commands:
      - echo "Starting build phase"
      - mkdir -p app scripts
      - echo "Hello World" > app/test.txt
      
      # Create a simple Docker Compose file for testing
      - |
        cat > app/docker-compose.yml << 'EOL'
        version: '3'
        services:
          web:
            image: nginx:latest
            ports:
              - "80:80"
            volumes:
              - ./html:/usr/share/nginx/html
        EOL
      
      # Create a test HTML file
      - mkdir -p app/html
      - echo "<html><body><h1>Security AI Application</h1><p>Deployed successfully!</p></body></html>" > app/html/index.html
  
  post_build:
    commands:
      - echo "Starting post-build phase"
      
      # Create a ROBUST installation script
      - |
        cat > scripts/before_install.sh << 'EOL'
        #!/bin/bash
        set -e  # Exit on any error

        echo "Installation started at $(date)"
        
        # Create application directory
        mkdir -p /opt/security-ai/app
        
        # Determine Linux distribution
        if [ -f /etc/os-release ]; then
            . /etc/os-release
            OS=$NAME
        else
            OS=$(cat /etc/system-release | cut -d ' ' -f 1)
        fi
        
        echo "Detected OS: $OS"
        
        # Install Docker based on distribution
        if [[ "$OS" == *"Amazon Linux"* ]]; then
            echo "Installing Docker for Amazon Linux..."
            sudo yum update -y
            sudo amazon-linux-extras install -y docker
            
            # Install Docker Compose v2 plugin
            DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
            mkdir -p $DOCKER_CONFIG/cli-plugins
            COMPOSE_VERSION=v2.23.3
            ARCH=$(uname -m)
            sudo curl -SL "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-linux-${ARCH}" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
            
        elif [[ "$OS" == *"Ubuntu"* ]] || [[ "$OS" == *"Debian"* ]]; then
            echo "Installing Docker for Ubuntu/Debian..."
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        else
            echo "Unsupported OS: $OS"
            exit 1
        fi
        
        # Start and enable Docker
        echo "Starting Docker service..."
        sudo systemctl start docker
        sudo systemctl enable docker
        
        # Add ec2-user to docker group
        sudo usermod -aG docker ec2-user
        
        # Verify Docker installation
        echo "Verifying Docker installation..."
        sudo docker --version
        
        # Verify Docker Compose installation
        echo "Verifying Docker Compose installation..."
        docker-compose --version || echo "Docker Compose not available as 'docker-compose'"
        docker compose version || echo "Docker Compose not available as 'docker compose'"
        
        echo "Installation completed at $(date)"
        EOL
      - chmod +x scripts/before_install.sh
      
      # Create a ROBUST deployment script
      - |
        cat > scripts/deploy.sh << 'EOL'
        #!/bin/bash
        set -e  # Exit on any error
        
        echo "Deployment started at $(date)"
        
        # Application deployment logic
        cd /opt/security-ai/app
        echo "Running application setup..."
        
        # Create HTML directory if it doesn't exist
        mkdir -p html
        
        # Check Docker status
        echo "Checking Docker status..."
        sudo systemctl status docker
        
        # Try both Docker Compose commands
        echo "Running Docker Compose..."
        if command -v docker-compose &> /dev/null; then
            echo "Using docker-compose command..."
            sudo docker-compose down || true
            sudo docker-compose up -d
        elif command -v docker &> /dev/null && docker compose version &> /dev/null; then
            echo "Using docker compose command..."
            sudo docker compose down || true
            sudo docker compose up -d
        else
            echo "ERROR: Neither docker-compose nor docker compose is available!"
            echo "Installing Docker Compose v2 plugin..."
            DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
            mkdir -p $DOCKER_CONFIG/cli-plugins
            COMPOSE_VERSION=v2.23.3
            ARCH=$(uname -m)
            sudo curl -SL "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-linux-${ARCH}" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
            
            echo "Trying again with docker-compose..."
            sudo docker-compose down || true
            sudo docker-compose up -d
        fi
        
        # Check container status
        echo "Checking running containers..."
        sudo docker ps
        
        echo "Deployment completed at $(date)"
        EOL
      - chmod +x scripts/deploy.sh
      
      # Create appspec.yml for CodeDeploy
      - |
        cat > appspec.yml << 'EOL'
        version: 0.0
        os: linux
        files:
          - source: /app
            destination: /opt/security-ai/app
          - source: /scripts
            destination: /opt/security-ai/scripts
        hooks:
          BeforeInstall:
            - location: scripts/before_install.sh
              timeout: 600
              runas: root
          ApplicationStart:
            - location: scripts/deploy.sh
              timeout: 600
              runas: root
        EOL
      
      - echo "CodeDeploy configuration created successfully"

artifacts:
  files:
    - appspec.yml
    - scripts/**/*
    - app/**/*
  discard-paths: no