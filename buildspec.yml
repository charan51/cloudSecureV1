version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      - echo "Starting installation phase"
      - npm --version
      - node --version
      # Install Terraform
      - wget https://releases.hashicorp.com/terraform/1.7.0/terraform_1.7.0_linux_amd64.zip
      - unzip terraform_1.7.0_linux_amd64.zip
      - mv terraform /usr/local/bin/
      - terraform --version
      # Install Ansible
      - pip3 install ansible
      - ansible --version
      # Install AWS CLI (needed for Terraform AWS provider)
      - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      - unzip awscliv2.zip
      - ./aws/install
      - aws --version

  pre_build:
    commands:
      - echo "Starting pre-build phase"
      # Install dependencies for the application
      - cd $CODEBUILD_SRC_DIR/app
      - if [ -f "package.json" ]; then npm install; fi
      # Run tests if present
      - echo "Running tests..."
      - if [ -f "package.json" ]; then npm test || echo "No tests found"; fi

  build:
    commands:
      - echo "Starting build phase"
      # Build the application if a build script exists
      - echo "Building application..."
      - if [ -f "package.json" ]; then npm run build || echo "No build script found"; fi
      # Run Terraform to provision/update infrastructure
      - echo "Running Terraform..."
      - cd $CODEBUILD_SRC_DIR/terraform
      - terraform init
      - terraform apply -auto-approve
      # Fetch the EC2 instance IP from Terraform outputs
      - INSTANCE_IP=$(terraform output -raw instance_ip)
      - echo "EC2 Instance IP: $INSTANCE_IP"
      # Generate Ansible inventory dynamically
      - cd $CODEBUILD_SRC_DIR/ansible
      - |
        cat << EOF > inventory.ini
          [cloudsecure_instances]
          $INSTANCE_IP ansible_user=ec2-user ansible_ssh_private_key_file=/tmp/cloudsecure.pem

          [cloudsecure_instances:vars]
          ansible_python_interpreter=/usr/bin/python3
        EOF
      # Fetch the SSH key (assuming itâ€™s stored in S3)
      - aws s3 cp s3://security-ai-secrets-<suffix>/cloudsecure.pem /tmp/cloudsecure.pem
      - chmod 400 /tmp/cloudsecure.pem
      # Run Ansible playbook to deploy the application
      - echo "Running Ansible playbook..."
      - ansible-playbook -i inventory.ini deploy.yml

  post_build:
    commands:
      - echo "Starting post-build phase"
      - echo "Deployment completed successfully!"

artifacts:
  files:
    - '**/*'
  discard-paths: no