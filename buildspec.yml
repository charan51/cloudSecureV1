version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 12
    commands:
      - echo "Starting installation"
  
  build:
    commands:
      - echo "Starting build phase"
      - mkdir -p app scripts
      - echo "Hello World" > app/test.txt
      
      # Create a simple Docker Compose file for testing
      - |
        cat > app/docker-compose.yml << 'EOL'
        version: '3'
        services:
          web:
            image: nginx:latest
            ports:
              - "80:80"
            volumes:
              - ./html:/usr/share/nginx/html
        EOL
      
      # Create a test HTML file
      - mkdir -p app/html
      - echo "<html><body><h1>Security AI Application</h1><p>Deployed successfully!</p></body></html>" > app/html/index.html
  
  post_build:
    commands:
      - echo "Starting post-build phase"
      
      # Create a SIMPLIFIED installation script focusing just on Docker
      - |
        cat > scripts/before_install.sh << 'EOL'
        #!/bin/bash
        
        echo "Installation started at $(date)"
        
        # Create application directory
        mkdir -p /opt/security-ai/app
        
        # Install Docker using official Docker install script (most reliable method)
        echo "Installing Docker using official Docker script..."
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh ./get-docker.sh
        
        # Verify Docker installation
        echo "Docker version:"
        sudo docker --version
        
        # Make sure Docker service is running
        echo "Starting Docker service..."
        sudo systemctl start docker
        sudo systemctl enable docker
        sudo systemctl status docker
        
        # Add ec2-user to docker group
        sudo usermod -aG docker ec2-user
        
        # Installing Docker Compose directly
        echo "Installing Docker Compose..."
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
        
        echo "Docker Compose version:"
        docker-compose --version || echo "Docker Compose installation failed"
        
        echo "Installation completed at $(date)"
        EOL
      - chmod +x scripts/before_install.sh
      
      # Simplify the deployment script - focus on just running the container
      - |
        cat > scripts/deploy.sh << 'EOL'
        #!/bin/bash
        
        echo "Deployment started at $(date)"
        
        # Application deployment logic
        cd /opt/security-ai/app
        echo "Current directory: $(pwd)"
        ls -la
        
        # Make sure Docker is installed, if not try again
        if ! command -v docker &> /dev/null; then
            echo "Docker not found, installing again..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh ./get-docker.sh
            sudo systemctl start docker
            sudo systemctl enable docker
        fi
        
        # Verify Docker is working
        echo "Docker version:"
        sudo docker --version
        echo "Docker status:"
        sudo systemctl status docker
        
        # Run Docker directly without compose if needed
        echo "Starting NGINX container directly..."
        sudo docker run -d -p 80:80 --name web -v $(pwd)/html:/usr/share/nginx/html nginx:latest
        
        # Check container status
        echo "Running containers:"
        sudo docker ps
        
        echo "Deployment completed at $(date)"
        EOL
      - chmod +x scripts/deploy.sh
      
      # Create appspec.yml for CodeDeploy
      - |
        cat > appspec.yml << 'EOL'
        version: 0.0
        os: linux
        files:
          - source: /app
            destination: /opt/security-ai/app
          - source: /scripts
            destination: /opt/security-ai/scripts
        hooks:
          BeforeInstall:
            - location: scripts/before_install.sh
              timeout: 900
              runas: root
          ApplicationStart:
            - location: scripts/deploy.sh
              timeout: 900
              runas: root
        EOL
      
      - echo "CodeDeploy configuration created successfully"

artifacts:
  files:
    - appspec.yml
    - scripts/**/*
    - app/**/*
  discard-paths: no