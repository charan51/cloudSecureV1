version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 12
    commands:
      - echo "Starting installation"
  
  build:
    commands:
      - echo "Starting build phase"
      - mkdir -p app scripts
      - echo "Hello World" > app/test.txt
      
      # Create a simple Docker Compose file for testing
      - |
        cat > app/docker-compose.yml << 'EOL'
        version: '3'
        services:
          web:
            image: nginx:latest
            ports:
              - "80:80"
            volumes:
              - ./html:/usr/share/nginx/html
        EOL
      
      # Create a test HTML file
      - mkdir -p app/html
      - echo "<html><body><h1>Security AI Application</h1><p>Deployed successfully!</p></body></html>" > app/html/index.html
  
  post_build:
    commands:
      - echo "Starting post-build phase"
      
      # Create a ROBUST installation script with better Amazon Linux detection
      - |
        cat > scripts/before_install.sh << 'EOL'
        #!/bin/bash
        set -e  # Exit on any error

        echo "Installation started at $(date)"
        
        # Create application directory
        mkdir -p /opt/security-ai/app
        
        # Determine Linux distribution and version
        if [ -f /etc/os-release ]; then
            . /etc/os-release
            OS=$NAME
            VERSION_ID=$VERSION_ID
            echo "Detected OS: $OS $VERSION_ID"
        else
            OS=$(cat /etc/system-release | cut -d ' ' -f 1)
            VERSION_ID=$(cat /etc/system-release | grep -oE '[0-9]+\.[0-9]+' | head -1)
            echo "Detected OS from system-release: $OS $VERSION_ID"
        fi
        
        # Different handling for Amazon Linux versions
        if [[ "$OS" == *"Amazon Linux"* ]]; then
            if [[ "$VERSION_ID" == "2" ]]; then
                echo "Installing Docker for Amazon Linux 2..."
                sudo yum update -y
                sudo amazon-linux-extras install -y docker
                
                # Make sure docker service file exists
                sudo yum install -y docker
            elif [[ "$VERSION_ID" == "2023" ]]; then
                echo "Installing Docker for Amazon Linux 2023..."
                sudo dnf update -y
                sudo dnf install -y docker
            else
                echo "Installing Docker for general Amazon Linux..."
                sudo yum update -y
                sudo yum install -y docker
            fi
            
            # Install Docker Compose v2 plugin
            echo "Installing Docker Compose..."
            COMPOSE_VERSION=v2.23.3
            ARCH=$(uname -m)
            sudo curl -SL "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-linux-${ARCH}" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
            
        elif [[ "$OS" == *"Ubuntu"* ]] || [[ "$OS" == *"Debian"* ]]; then
            echo "Installing Docker for Ubuntu/Debian..."
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        else
            echo "Trying generic Docker installation for $OS..."
            if command -v yum &> /dev/null; then
                sudo yum update -y
                sudo yum install -y docker
            elif command -v apt-get &> /dev/null; then
                sudo apt-get update
                sudo apt-get install -y docker.io
            else
                echo "Unsupported package manager - manual installation needed"
                exit 1
            fi
        fi
        
        # Try multiple service names for Docker
        echo "Starting Docker service..."
        if systemctl list-unit-files | grep -q docker.service; then
            echo "Found docker.service unit file"
            sudo systemctl start docker
            sudo systemctl enable docker
        elif systemctl list-unit-files | grep -q docker.socket; then
            echo "Found docker.socket unit file"
            sudo systemctl start docker.socket
            sudo systemctl enable docker.socket
        else
            echo "Docker service unit not found. Trying to install Docker using official script..."
            # Try Docker's official installation script as a fallback
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo systemctl start docker
            sudo systemctl enable docker
        fi
        
        # Add ec2-user to docker group
        sudo usermod -aG docker ec2-user
        
        # Verify Docker installation
        echo "Verifying Docker installation..."
        sudo docker --version || echo "Docker command not found or errored"
        
        # Verify Docker Compose installation
        echo "Verifying Docker Compose installation..."
        sudo docker-compose --version || echo "docker-compose command not found or errored"
        sudo docker compose version || echo "docker compose subcommand not found or errored"
        
        echo "Installation completed at $(date)"
        EOL
      - chmod +x scripts/before_install.sh
      
      # Update deployment script to handle Docker service not found
      - |
        cat > scripts/deploy.sh << 'EOL'
        #!/bin/bash
        
        echo "Deployment started at $(date)"
        
        # Application deployment logic
        cd /opt/security-ai/app
        echo "Running application setup..."
        
        # Create HTML directory if it doesn't exist
        mkdir -p html
        
        # Check if Docker is running without failing script
        echo "Checking Docker status..."
        if systemctl is-active docker &>/dev/null; then
            echo "Docker service is active"
        elif systemctl is-active docker.socket &>/dev/null; then
            echo "Docker socket is active"
        else
            echo "Docker service not running. Trying to start it..."
            sudo systemctl start docker || echo "Failed to start docker service"
            
            # If still not running, try the Docker installer again
            if ! systemctl is-active docker &>/dev/null; then
                echo "Installing Docker using official script..."
                curl -fsSL https://get.docker.com -o get-docker.sh
                sudo sh get-docker.sh
                sudo systemctl start docker || echo "Failed to start docker service after installation"
            fi
        fi
        
        # Check if Docker command works
        if sudo docker ps &>/dev/null; then
            echo "Docker command working"
        else
            echo "Docker command not working. Installation might be incomplete."
            exit 1
        fi
        
        # Try both Docker Compose commands
        echo "Running Docker Compose..."
        if command -v docker-compose &> /dev/null; then
            echo "Using docker-compose command..."
            sudo docker-compose down || true
            sudo docker-compose up -d
        elif command -v docker &> /dev/null && sudo docker compose version &> /dev/null; then
            echo "Using docker compose command..."
            sudo docker compose down || true
            sudo docker compose up -d
        else
            echo "Installing Docker Compose..."
            COMPOSE_VERSION=v2.23.3
            ARCH=$(uname -m)
            sudo curl -SL "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-linux-${ARCH}" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
            
            echo "Trying with docker-compose..."
            sudo docker-compose down || true
            sudo docker-compose up -d
        fi
        
        # Check container status
        echo "Checking running containers..."
        sudo docker ps
        
        echo "Deployment completed at $(date)"
        EOL
      - chmod +x scripts/deploy.sh
      
      # Create appspec.yml for CodeDeploy
      - |
        cat > appspec.yml << 'EOL'
        version: 0.0
        os: linux
        files:
          - source: /app
            destination: /opt/security-ai/app
          - source: /scripts
            destination: /opt/security-ai/scripts
        hooks:
          BeforeInstall:
            - location: scripts/before_install.sh
              timeout: 900
              runas: root
          ApplicationStart:
            - location: scripts/deploy.sh
              timeout: 900
              runas: root
        EOL
      
      - echo "CodeDeploy configuration created successfully"

artifacts:
  files:
    - appspec.yml
    - scripts/**/*
    - app/**/*
  discard-paths: no