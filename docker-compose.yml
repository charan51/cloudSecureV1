version: '3.8'

services:
  client:
    image: ${ECR_REPOSITORY_URI}/security-ai-client:latest
    build:
      context: ./app/client
      dockerfile: Dockerfile
    container_name: cloudsecure-client
    environment:
      - REACT_APP_API_URL=http://localhost:3000
      - NODE_ENV=development
    ports:
      - "80:80"
    depends_on:
      - server
    restart: always
    networks:
      - app-network

  server:
    build:
      context: ./app/server
      dockerfile: Dockerfile
    container_name: cloudsecure-server
    ports:
      - "3000:3000"
    depends_on:
      - db-service
      - redis-service
      - mongo-service
    environment:
      - NODE_ENV=development
      - DB_HOST=db-service
      - DB_USER=admin
      - DB_PASSWORD=adminpassword
      - DB_NAME=security_ai
      - REDIS_HOST=redis-service
      - MONGODB_URI=mongodb://mongo-user:mongo-password@mongo-service:27017/cloudsecure?authSource=admin
      - CLIENT_URL=http://localhost
    restart: always
    networks:
      - app-network

  db-service:
    image: mysql:8.0
    container_name: db-service
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: security_ai
      MYSQL_USER: admin
      MYSQL_PASSWORD: adminpassword
    ports:
      - "3307:3306"
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    networks:
      - app-network

  mongo-service:
    image: mongo:latest
    container_name: mongo-service
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo-user
      MONGO_INITDB_ROOT_PASSWORD: mongo-password
      MONGO_INITDB_DATABASE: cloudsecure
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: always
    networks:
      - app-network

  redis-service:
    image: redis:latest
    container_name: redis-service
    ports:
      - "6379:6379"
    restart: always
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db_data:
  mongo_data:

